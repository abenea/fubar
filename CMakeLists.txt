set(CMAKE_POLICY_DEFAULT_CMP0167 NEW)
cmake_minimum_required(VERSION 3.13)
project(fubar)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
if (ENABLE_QT6)
  find_package(Qt6 REQUIRED Core Gui Widgets Test Network Xml DBus)
endif()
if (NOT Qt6_FOUND)
  find_package(Qt5 5.15 REQUIRED COMPONENTS Core Gui Widgets Test Network Xml DBus)
  find_package(KF5WindowSystem)
  find_package(KF5GlobalAccel)
  add_library(KF::WindowSystem ALIAS KF5::WindowSystem)
  add_library(KF::GlobalAccel ALIAS KF5::GlobalAccel)
else()
  find_package(KF6WindowSystem)
  find_package(KF6GlobalAccel)
  add_library(KF::WindowSystem ALIAS KF6::WindowSystem)
  add_library(KF::GlobalAccel ALIAS KF6::GlobalAccel)
endif()
find_package(Cue REQUIRED)
find_package(Boost REQUIRED)
find_package(Taglib 1.8.0 REQUIRED)
find_package(Protobuf REQUIRED)
find_package(MPV REQUIRED)
find_package(Glyr REQUIRED)
include(CTest)
if(BUILD_TESTING)
  find_package(GTest REQUIRED)
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)

add_compile_options(-Wall)
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_library(util util.cpp)
target_link_libraries(util PUBLIC Qt::Core)

add_subdirectory(library)
add_subdirectory(player)
add_subdirectory(ui)
add_subdirectory(plugins)

qt_add_resources(ui_RC ui/icons/icons.qrc)
add_executable(fubar ${ui_RC} main.cpp)
target_link_libraries(fubar PRIVATE util ui player library Qt::Gui)

install(TARGETS fubar DESTINATION bin/)
